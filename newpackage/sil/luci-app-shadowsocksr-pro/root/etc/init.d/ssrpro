#!/bin/sh /etc/rc.common
#
#

START=99
STOP=15

SERVICE_DAEMONIZE=1  ####import! detach server_start /usr/bin/ssr-switch
SS_REDIR_PIDFILE=/var/run/ssr-redir-go.pid 
PDNSD_LOCAL_PORT=7453
USER=nobody
GROUP=nogroup
CACHEDIR=/var/pdnsd
CACHE=$CACHEDIR/pdnsd.cache
SSRCONF=/var/etc/shadowsocksr.json
CRON_FILE=/etc/crontabs/root
CONFIGNAME=shadowsocksr

newserver=$1
gb_switch_enable=0
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	# $covered_subnets, $local_addresses are not required
covered_subnets=`uci get shadowsocksr.@shadowsocksr[0].covered_subnets 2>/dev/null`
local_addresses=`uci get shadowsocksr.@shadowsocksr[0].local_addresses 2>/dev/null`
	# Get LAN settings as default parameters
	[ -f /lib/functions/network.sh ] && . /lib/functions/network.sh
	[ -z "$covered_subnets" ] && network_get_subnet covered_subnets lan
	[ -z "$local_addresses" ] && network_get_ipaddr local_addresses lan
vt_np_ipset="china-ip"  # Must be global variable

__gfwlist_by_mode() {
	case "$1" in
		V) echo unblock-youku;;
		*) echo china-banned;;
	esac
}

__get_args() {
	if [ -z "$newserver" ] ;then
		global_server=$(uci_get_by_type $CONFIGNAME global_server)
	else
		global_server=$newserver
		gb_switch_enable=1
	fi
	cfg_enabled=$(uci_get_by_type $CONFIGNAME enabled)
	cfg_local_port=$(uci_get_by_type $CONFIGNAME local_port)
	cfg_enable_switch=$(uci_get_by_type $CONFIGNAME enable_switch)
	cfg_delay_time=$(uci_get_by_type $CONFIGNAME delay_time)
	cfg_check_timeout=$(uci_get_by_type $CONFIGNAME check_timeout)
	cfg_safe_dns=$(uci_get_by_type $CONFIGNAME safe_dns)
	cfg_safe_dns_port=$(uci_get_by_type $CONFIGNAME safe_dns_port)
	cfg_safe_dns_tcp=$(uci_get_by_type $CONFIGNAME safe_dns_tcp)
	cfg_proxy_mode=$(uci_get_by_type $CONFIGNAME proxy_mode)
	cfg_gfw_cron_mode=$(uci_get_by_type $CONFIGNAME gfw_cron_mode)
	cfg_cn_cron_mode=$(uci_get_by_type $CONFIGNAME cn_cron_mode)
	cfg_gfwlist=`__gfwlist_by_mode $cfg_proxy_mode`

	vt_server_addr=$(uci_get_by_name $global_server server)
	vt_server_port=$(uci_get_by_name $global_server server_port)
	vt_switch_enable=$(uci_get_by_name $global_server switch_enable)
	vt_fast_open=$(uci_get_by_name $global_server fast_open)
	vt_password=$(uci_get_by_name $global_server password)
	vt_method=$(uci_get_by_name $global_server method)
	vt_protocol=$(uci_get_by_name $global_server protocol)
	vt_obfs=$(uci_get_by_name $global_server obfs)
	vt_timeout=$(uci_get_by_name $global_server timeout)
	vt_obfs_param=$(uci_get_by_name $global_server obfs_param)
}
uci_get_by_name() {
	local ret=$(uci get $CONFIGNAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local index=0
	if [ -n $4 ]; then
		index=$4
	fi
	local ret=$(uci get $CONFIGNAME.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
start() {
	[ "$global_server" = "nil" ] && return 1
	__get_args
	SS_REDIR_PORT=$cfg_local_port

	if [ "$cfg_enabled" = 0 ]; then
		echo "WARNING: Shadowsocksr is disabled."
		return 1
	fi
	[ -f /etc/init.d/pdnsd ] && /etc/init.d/pdnsd disable 2>/dev/null

	# -----------------------------------------------------------------
	if [ -z "$vt_server_addr" -o -z "$vt_server_port" ]; then
		echo "WARNING: Shadowsocksr not fully configured, not starting."
		return 1
	fi

	[ -z "$cfg_proxy_mode" ] && cfg_proxy_mode=M
	[ -z "$vt_method" ] && vt_method=table
	[ -z "$cfg_local_port" ] && cfg_local_port=7070
	[ -z "$vt_timeout" ] && vt_timeout=60
	case "$cfg_proxy_mode" in
		M|S|G)
			[ -z "$cfg_safe_dns" ] && cfg_safe_dns="8.8.8.8"
			[ -z "$cfg_safe_dns_tcp" ] && cfg_safe_dns_tcp=1
			;;
	esac
	[ -z "$cfg_safe_dns_port" ] && cfg_safe_dns_port=53
	if [ $vt_fast_open = "1" ] ;then
		vt_fastopen="true";
	else
		vt_fastopen="false";
	fi
	# -----------------------------------------------------------------
	###### shadowsocksr ######
	cat > $SSRCONF <<EOF
{
    "server": "$vt_server_addr",
    "server_port": $vt_server_port,
    "password": "$vt_password",
    "method": "$vt_method",
    "local_address": "0.0.0.0",
    "local_port": $cfg_local_port,
    "timeout": $vt_timeout,
    "protocol": "$vt_protocol",
    "protocol_param": "",
    "obfs": "$vt_obfs",
    "obfs_param": "$vt_obfs_param",
    "fast_open": $vt_fastopen
}
EOF
	/usr/bin/ssr-redir -u -c $SSRCONF -f $SS_REDIR_PIDFILE || return 1

	# IPv4 firewall rules
	add_rule
  
	# -----------------------------------------------------------------
	mkdir -p /var/etc/dnsmasq-go.d
	###### Anti-pollution configuration ######
	if [ -n "$cfg_safe_dns" ]; then
		if [ "$cfg_safe_dns_tcp" = 1 ]; then
			start_pdnsd "$cfg_safe_dns"
			awk -vs="127.0.0.1#$PDNSD_LOCAL_PORT" '!/^$/&&!/^#/{printf("server=/%s/%s\n",$0,s)}' \
				/etc/gfwlist/$cfg_gfwlist > /var/etc/dnsmasq-go.d/01-pollution.conf
		else
			awk -vs="$cfg_safe_dns#$cfg_safe_dns_port" '!/^$/&&!/^#/{printf("server=/%s/%s\n",$0,s)}' \
				/etc/gfwlist/$cfg_gfwlist > /var/etc/dnsmasq-go.d/01-pollution.conf
		fi
	else
		echo "WARNING: Not using secure DNS, DNS resolution might be polluted if you are in China."
	fi

	###### dnsmasq-to-ipset configuration ######
	case "$cfg_proxy_mode" in
		M|V)
			awk '!/^$/&&!/^#/{printf("ipset=/%s/'"$cfg_gfwlist"'\n",$0)}' \
				/etc/gfwlist/$cfg_gfwlist > /var/etc/dnsmasq-go.d/02-ipset.conf
			;;
	esac

	# -----------------------------------------------------------------
	###### Restart main 'dnsmasq' service if needed ######
	if ls /var/etc/dnsmasq-go.d/* >/dev/null 2>&1; then
		mkdir -p /tmp/dnsmasq.d
		cat > /tmp/dnsmasq.d/dnsmasq-go.conf <<EOF
conf-dir=/var/etc/dnsmasq-go.d
EOF
		/etc/init.d/dnsmasq restart
	fi

	# -----------------------------------------------------------------
	###### switch server ######
	if [ $cfg_enable_switch = "1" ] ;then
		if [ $vt_switch_enable = "1" ] ;then
			if [ -z "$newserver" ] ;then
				service_start /usr/bin/ssr-switch start $cfg_delay_time $cfg_check_timeout
				gb_switch_enable=1
			fi
		fi
	fi
# cron jobs
	#add_cron
}

stop() {
  
	# -----------------------------------------------------------------
	__get_args
	SS_REDIR_PORT=$cfg_local_port
	rm -rf /var/etc/dnsmasq-go.d
	if [ -f /tmp/dnsmasq.d/dnsmasq-go.conf ]; then
		rm -f /tmp/dnsmasq.d/dnsmasq-go.conf
		[ -z $1 ] && /etc/init.d/dnsmasq restart
	fi
	stop_pdnsd
	# --STOP IPv4 firewall---------------------------------------------------------------
	del_rule
	# -----------------------------------------------------------------
	if [ -f $SS_REDIR_PIDFILE ]; then
		kill -9 `cat $SS_REDIR_PIDFILE`
		rm -f $SS_REDIR_PIDFILE
	fi
	killall -9 ssr-redir 2>/dev/null
	[ -z "$newserver" ] && killall -q -9 ssr-switch
	#del_cron
}

restart() {
	KEEP_GFWLIST=Y
	sleep 3
	stop x
	start
}

reload() {
	__get_args
	SS_REDIR_PORT=$cfg_local_port
	KEEP_GFWLIST=Y
	del_rule
	add_rule
	if [ "$cfg_safe_dns_tcp" = 1 ]; then
		stop_pdnsd
		start_pdnsd
	fi
}

# $1: upstream DNS server
gen_cache() {
	if ! test -f "$CACHE"; then
		mkdir -p `dirname $CACHE`
		echo -n -e "pd13\0\0\0\0" > "$CACHE"
		chown -R $USER.$GROUP $CACHEDIR
	fi
}
start_pdnsd() {
	local safe_dns="$1"

	local tcp_dns_list="208.67.222.222,208.67.220.220"
	[ -n "$safe_dns" ] && tcp_dns_list="$safe_dns,$tcp_dns_list"

	#killall -9 pdnsd 2>/dev/null && sleep 1
	kill -9 $(cat /var/run/pdnsd.pid) >/dev/null 2>&1 && mkdir -p /var/etc /var/pdnsd
	cat > /var/etc/pdnsd.conf <<EOF
global {
	perm_cache=off;
	cache_dir="/var/pdnsd";
	pid_file = /var/run/pdnsd.pid;
	run_as="nobody";
	server_ip = 127.0.0.1;
	server_port = $PDNSD_LOCAL_PORT;
	status_ctl = on;
	query_method = tcp_only;
	min_ttl=1h;
	max_ttl=1w;
	timeout=10;
	neg_domain_pol=on;
	proc_limit=2;
	procq_limit=8;
}
server {
	label= "fwxxx";
	ip = $tcp_dns_list;
	port = 53;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
EOF
	gen_cache
	/usr/sbin/pdnsd -c /var/etc/pdnsd.conf -d

	# Access TCP DNS server through Shadowsocksr tunnel
	if iptables -t nat -N pdnsd_output; then
		iptables -t nat -A pdnsd_output -m set --match-set $vt_np_ipset dst -j RETURN
		iptables -t nat -A pdnsd_output -p tcp -j REDIRECT --to $SS_REDIR_PORT
	fi
	iptables -t nat -I OUTPUT -p tcp --dport 53 -j pdnsd_output
}

stop_pdnsd() {
	if iptables -t nat -F pdnsd_output 2>/dev/null; then
		while iptables -t nat -D OUTPUT -p tcp --dport 53 -j pdnsd_output 2>/dev/null; do :; done
		iptables -t nat -X pdnsd_output
	fi
	killall -9 pdnsd 2>/dev/null
	rm -rf /var/pdnsd
	rm -f /var/etc/pdnsd.conf
}

add_cron() {
	sed -i '/up-gfwlist.sh/d' $CRON_FILE
	sed -i '/ssr-switch.log/d' $CRON_FILE
	if [ $cfg_gfw_cron_mode -eq 1 ]; then
		echo '0 5 * * * /etc/shadowsocksr/up-gfwlist.sh > /tmp/gfwupdate.log 2>&1' >> $CRON_FILE	
	fi
	#echo '0 */1 * * * /etc/shadowsocksr/ssr-watchdog >> /tmp/shadowsocksr_watchdog.log 2>&1' >> $CRON_FILE
	echo '0 1 * * 0 echo "" > /tmp/ssr-switch.log' >> $CRON_FILE
	crontab $CRON_FILE
}

del_cron() {
	sed -i '/up-gfwlist.sh/d' $CRON_FILE
	sed -i '/ssr-switch.log/d' $CRON_FILE
	/etc/init.d/cron restart
}


add_rule() {
	ipset -! create china-ip hash:net family inet hashsize 1024 maxelem 65536 2>/dev/null
	awk '!/^$/&&!/^#/{printf("add china-ip %s'" "'\n",$0)}' /etc/shadowsocksr/china-ip.txt > /tmp/china-ip.ipset
	#sed -i "s/cfg_gfwlist/$cfg_gfwlist/g" /tmp/addinip.ipset
	ipset -! restore < /tmp/china-ip.ipset
	
	iptables -t nat -N shadowsocksr_pre
	iptables -t nat -F shadowsocksr_pre
	iptables -t nat -A shadowsocksr_pre -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A shadowsocksr_pre -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A shadowsocksr_pre -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A shadowsocksr_pre -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A shadowsocksr_pre -d 224.0.0.0/3 -j RETURN
	iptables -t nat -A shadowsocksr_pre -d $vt_server_addr -j RETURN
	
	iptables -N gameboost -t mangle
	ipset -! create gameuser hash:ip maxelem 65536 2>/dev/null
	/usr/sbin/ip rule add fwmark 0x01/0x01 table 100
	/usr/sbin/ip route add local 0.0.0.0/0 dev lo table 100
	iptables -t mangle -A gameboost -p udp -d 10.0.0.0/8 -j RETURN
	iptables -t mangle -A gameboost -p udp -d 127.0.0.0/8 -j RETURN
	iptables -t mangle -A gameboost -p udp -d 172.16.0.0/12 -j RETURN
	iptables -t mangle -A gameboost -p udp -d 192.168.0.0/16 -j RETURN
	iptables -t mangle -A gameboost -p udp -d 224.0.0.0/3 -j RETURN
	
	iptables -t mangle -A gameboost -p udp -m set --match-set china-ip dst -j RETURN
	iptables -t mangle -A gameboost -p udp --dport 53 -j RETURN
	iptables -t mangle -A gameboost -p udp -j TPROXY --on-port 7070 --tproxy-mark 0x01/0x01
	iptables -t mangle -A PREROUTING -m set --match-set gameuser src -j gameboost 
	for i in $(seq 0 100)
	do
		local ip=$(uci_get_by_type acl_rule ipaddr '' $i)
		local mode=$(uci_get_by_type acl_rule filter_mode '' $i)
		case "$mode" in
		disable)
			iptables -t nat -A shadowsocksr_pre -s $ip -j RETURN
			;;
		global)
			iptables -t nat -A shadowsocksr_pre -s $ip -p tcp -j REDIRECT --to $SS_REDIR_PORT
			iptables -t nat -A shadowsocksr_pre -s $ip -j RETURN 
			;;
		game)
			iptables -t nat -A shadowsocksr_pre -p tcp -s $ip -m set ! --match-set china-ip dst -j REDIRECT --to $SS_REDIR_PORT
			ipset -! add gameuser $ip
			;;
		esac
	done
	case "$cfg_proxy_mode" in
		G) : ;;
		S)
			iptables -t nat -A shadowsocksr_pre -m set --match-set $vt_np_ipset dst -j RETURN
			iptables -t nat -I OUTPUT -p tcp -m multiport --dports 80,443 -m set ! --match-set $vt_np_ipset dst -j REDIRECT --to $SS_REDIR_PORT
			;;
		M)
			ipset -! create $cfg_gfwlist hash:ip maxelem 65536 2>/dev/null
			awk '!/^$/&&!/^#/{printf("add cfg_gfwlist %s'" "'\n",$0)}' /etc/shadowsocksr/addinip.txt > /tmp/addinip.ipset
			sed -i "s/cfg_gfwlist/$cfg_gfwlist/g" /tmp/addinip.ipset
			ipset -! restore < /tmp/addinip.ipset
			iptables -t nat -A shadowsocksr_pre -m set ! --match-set $cfg_gfwlist dst -j RETURN
			iptables -t nat -A shadowsocksr_pre -m set --match-set $vt_np_ipset dst -j RETURN
			iptables -t nat -I OUTPUT -p tcp -m multiport --dports 80,443 -m set --match-set $cfg_gfwlist dst -j REDIRECT --to $SS_REDIR_PORT
			;;
		V)
			vt_np_ipset=""
			ipset -! create $cfg_gfwlist hash:ip maxelem 65536 2>/dev/null
			iptables -t nat -A shadowsocksr_pre -m set ! --match-set $cfg_gfwlist dst -j RETURN
			;;
	esac
	local subnet
	for subnet in $covered_subnets; do
		iptables -t nat -A shadowsocksr_pre -s $subnet -p tcp -j REDIRECT --to $SS_REDIR_PORT
	done
	iptables -t nat -I PREROUTING -p tcp -j shadowsocksr_pre
}

del_rule() {
	if iptables -t nat -F shadowsocksr_pre 2>/dev/null; then
		while iptables -t nat -D PREROUTING -p tcp -j shadowsocksr_pre 2>/dev/null; do :; done
		iptables -t nat -X shadowsocksr_pre 2>/dev/null
	fi
	
	iptables -t nat -D OUTPUT -p tcp -m multiport --dports 80,443 -m set --match-set $cfg_gfwlist dst -j REDIRECT --to $SS_REDIR_PORT 2>/dev/null
	iptables -t nat -D OUTPUT -p tcp -m multiport --dports 80,443 -m set ! --match-set $vt_np_ipset dst -j REDIRECT --to $SS_REDIR_PORT 2>/dev/null
	
	/usr/sbin/ip rule del fwmark 0x01/0x01 table 100
	/usr/sbin/ip route del local 0.0.0.0/0 dev lo table 100
	if iptables -t mangle -F gameboost 2>/dev/null; then
		while iptables -t mangle -D PREROUTING -m set --match-set gameuser src -j gameboost 2>/dev/null; do :; done
		iptables -t mangle -X gameboost 2>/dev/null
	fi

	ipset destroy china-ip 2>/dev/null
	ipset destroy gameuser 2>/dev/null


	# -----------------------------------------------------------------
	[ "$KEEP_GFWLIST" = Y ] || ipset destroy "$cfg_gfwlist" 2>/dev/null
}
